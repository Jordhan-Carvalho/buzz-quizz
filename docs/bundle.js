!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){"use strict";var r=n(2),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function c(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:c,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,r){c(t[r])&&c(n)?t[r]=e(t[r],n):c(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){e.exports=n(10)},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(16),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(6)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(i)})),e.exports=c}).call(this,n(15))},function(e,t,n){"use strict";var r=n(0),o=n(17),i=n(19),a=n(3),s=n(20),c=n(23),u=n(24),l=n(7);e.exports=function(e){return new Promise((function(t,n){var d=e.data,f=e.headers;r.isFormData(d)&&delete f["Content-Type"],(r.isBlob(d)||r.isFile(d))&&d.type&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=unescape(encodeURIComponent(e.auth.password))||"";f.Authorization="Basic "+btoa(h+":"+m)}var v=s(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?c(p.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,i),p=null}},p.onabort=function(){p&&(n(l("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(l(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var g=(e.withCredentials||u(v))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;g&&(f[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&r.forEach(f,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),d||(d=null),p.send(d)}))}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function c(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function u(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=c(void 0,e[o])):n[o]=c(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=c(void 0,t[e]))})),r.forEach(i,u),r.forEach(a,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=c(void 0,e[o])):n[o]=c(void 0,t[o])})),r.forEach(s,(function(r){r in t?n[r]=c(e[r],t[r]):r in e&&(n[r]=c(void 0,e[r]))}));var l=o.concat(i).concat(a).concat(s),d=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(d,u),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";var r=n(0),o=n(2),i=n(11),a=n(8);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=s(n(5));c.Axios=i,c.create=function(e){return s(a(c.defaults,e))},c.Cancel=n(9),c.CancelToken=n(25),c.isCancel=n(4),c.all=function(e){return Promise.all(e)},c.spread=n(26),e.exports=c,e.exports.default=c},function(e,t,n){"use strict";var r=n(0),o=n(3),i=n(12),a=n(13),s=n(8);function c(e){this.defaults=e,this.interceptors={request:new i,response:new i}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=c},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(14),i=n(4),a=n(5);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,u=[],l=!1,d=-1;function f(){l&&c&&(l=!1,c.length?u=c.concat(u):d=-1,u.length&&p())}function p(){if(!l){var e=s(f);l=!0;for(var t=u.length;t;){for(c=u,u=[];++d<t;)c&&c[d].run();d=-1,t=u.length}c=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new h(e,t)),1!==u.length||l||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(21),o=n(22);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(9);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";n.r(t),n.d(t,"renderFromLoginToQuizzes",(function(){return X})),n.d(t,"renderFromCreateToQuizzes",(function(){return J})),n.d(t,"renderFromQuizzesToCreate",(function(){return G})),n.d(t,"renderFromQuizzesToQuizz",(function(){return K})),n.d(t,"renderFromQuizzToEndGame",(function(){return W})),n.d(t,"toggleIsLoading",(function(){return Y})),n.d(t,"toggleIsLoadingQuizz",(function(){return Z}));var r=n(1),o=n.n(r);const i=document.querySelector(".loading-screen");function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function s(){i.classList.toggle("display-none")}var c=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};const u=document.querySelector(".quizzes-screen");function l(e,t){return c(this,void 0,void 0,(function*(){if("SIM"===prompt("Tem certeza? pra apagar digite SIM"))try{yield o.a.delete("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes/"+e,{headers:{"User-Token":t}}),d(t)}catch(e){console.error(e)}}))}function d(e){return c(this,void 0,void 0,(function*(){let t=yield function(e){return c(this,void 0,void 0,(function*(){let t=[];try{s();const{data:n}=yield o.a.get("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes",{headers:{"User-token":e}});for(let e of n)t.push({id:e.id,title:e.title,data:e.data})}catch(e){console.error(e)}return s(),t}))}(e);u.innerHTML="";const n=document.createElement("div");n.setAttribute("class","box-container new-quizz-container"),n.addEventListener("click",()=>{G()}),n.innerHTML='<h3>Novo Quizz</h3> <ion-icon name="add-circle"></ion-icon>',null==u||u.insertAdjacentElement("beforeend",n);for(let n of t){let t=`<h3>${n.title}</h3>\n    <div class="icons-container">\n      <ion-icon class="delete-icon" name="trash"></ion-icon>\n      <ion-icon class="edit-icon"   name="create"></ion-icon>\n    </div>`,r=document.createElement("div");r.setAttribute("class","box-container"),r.addEventListener("click",(function(e){K(e,n)})),r.innerHTML=t,r.querySelector(".edit-icon").addEventListener("click",(function(e){G(n)})),r.querySelector(".delete-icon").addEventListener("click",()=>{l(n.id,e)}),null==u||u.insertAdjacentElement("beforeend",r)}}))}var f=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};let p,h,m,v,g,y,w=[],b=1,z=[],q=[],x=1,L=[];function T(e=!1,t,n){try{!function(){w=[];for(let e of z){let t,n=[],r=a(e.children[1].value.trim());S(r);for(let t=2;t<=5;t++){const r=a(e.children[t].children[0].value.trim()),o=e.children[t].children[1].value.trim();if(n.push({answer:r,answerUrl:o,correct:2===t}),""===r||""===o)throw new Error("Campo de resposta vazio")}t={questionTitle:r,answers:n},w.push(t)}}(),function(){q=[];for(let e of L){let t,n={minRange:Number(e.children[1].children[0].value.trim()),maxRange:Number(e.children[1].children[1].value.trim())},r=a(e.children[2].value.trim()),o=e.children[3].value.trim(),i=a(e.children[4].value.trim());if(""===r||""===o||""===i||isNaN(n.minRange)||isNaN(n.maxRange))throw new Error("Preencha todos os campos do nivel");t={title:r,range:n,description:i,imageUrl:o},q.push(t)}}(),e?function(e,t){f(this,void 0,void 0,(function*(){const n={title:a(p.value.trim()),data:{levels:q,questions:w,config:{fontColor:g.value.trim(),themeColor:y.value.trim()}}};try{Z(),yield o.a.put("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes/"+e,n,{headers:{"User-Token":t}}),J()}catch(e){console.error(e),alert("Preencha todos os campos")}Z()}))}(n,t):function(e){f(this,void 0,void 0,(function*(){const t={title:a(p.value.trim()),data:{levels:q,questions:w,config:{fontColor:g.value.trim(),themeColor:y.value.trim()}}};try{Z(),yield o.a.post("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes",t,{headers:{"User-Token":e}}),J()}catch(e){console.error(e),alert("Preencha todos os campos")}Z()}))}(t)}catch(e){alert(e.message),console.error(e)}}function S(e){if("?"!==e.charAt(e.length-1)||e.indexOf("?")!==e.length-1)throw new Error("É obrigatorio terminar a pergunta com '?', e só se pode ter 1 pergunta por bloco de perguntas.")}function E(e){e.innerHTML='<input\n  class="quizz-title-input"\n  type="text"\n  id="quizz-title"\n  placeholder="Digite o título do seu quizz"\n/>\n<div class="color-picker">\n  <p>Selecione as cores do seu Quizz:</p>\n  <div>\n    <input\n      type="color"\n      id="quizz-bg-color"\n      name="head"\n      value="#6c8fb8"\n    />\n    <label for="head">Fundo</label>\n  </div>\n\n  <div>\n    <input\n      type="color"\n      id="quizz-font-color"\n      name="body"\n      value="#DDDDDD"\n    />\n    <label for="body">Fonte</label>\n  </div>\n</div>\n<div class="questions-container"></div>\n<ion-icon\n  class="add-question"\n  name="add-circle"\n></ion-icon>\n<div class="levels-container"></div>\n<ion-icon\n  class="add-level"\n  name="add-circle"\n></ion-icon>\n<button class="post-quizz-button">PUBLICAR</button>\n<div class="loading-gif-quizz display-none">\n  <img src="./assets/images/loadingBtn.gif" alt="" />\n</div>',e.querySelector(".add-level").addEventListener("click",()=>{x++,C()}),e.querySelector(".add-question").addEventListener("click",()=>{b++,A()}),m=e.querySelector(".questions-container"),v=e.querySelector(".levels-container"),p=e.querySelector("#quizz-title"),h=e.querySelector(".post-quizz-button"),g=document.querySelector("#quizz-font-color"),y=document.querySelector("#quizz-bg-color")}function A(e,t,n=!1){n&&(b=t);let r=document.createElement("div");r.setAttribute("class","create-question-container"),r.innerHTML=`<h3>Pergunta ${b}</h3>\n    <input class="question-input" type="text" placeholder="Digite a pergunta" value="${n?null==e?void 0:e.questionTitle:""}" >\n    <div class="answer-input-container correct-answer">\n      <input type="text" placeholder="Digite a resposta correta" value="${n?null==e?void 0:e.answers[0].answer:""}">\n      <input type="text" placeholder="Link para imagem correta" value="${n?null==e?void 0:e.answers[0].answerUrl:""}">\n    </div>\n    <div class="answer-input-container wrong-answer">\n      <input type="text" placeholder="Digite a resposta errada 1" value="${n?null==e?void 0:e.answers[1].answer:""}">\n      <input type="text" placeholder="Link para imagem errada 1" value="${n?null==e?void 0:e.answers[1].answerUrl:""}">\n    </div>\n    <div class="answer-input-container wrong-answer">\n      <input type="text" placeholder="Digite a resposta errada 2" value="${n?null==e?void 0:e.answers[2].answer:""}">\n      <input type="text" placeholder="Link para imagem errada 2" value="${n?null==e?void 0:e.answers[2].answerUrl:""}">\n    </div>\n    <div class="answer-input-container wrong-answer">\n      <input type="text" placeholder="Digite a resposta errada 3" value="${n?null==e?void 0:e.answers[3].answer:""}">\n      <input type="text" placeholder="Link para imagem errada 3" value="${n?null==e?void 0:e.answers[3].answerUrl:""}">\n    </div>`,z.push(r),m.appendChild(r),setTimeout(()=>{r.classList.add("display-visible")},0)}function C(e,t,n=!1){n&&(x=t);let r=document.createElement("div");r.setAttribute("class","create-level-container"),r.innerHTML=`\n  <h3>Nível ${x}</h3>\n  <div class="answer-input-container">\n    <input type="text" placeholder="% Minima de Acerto do nível" value="${n?null==e?void 0:e.range.minRange:""}">\n    <input type="text"  placeholder="% Máxima de Acerto do nível" value="${n?null==e?void 0:e.range.maxRange:""}">\n  </div>\n    <input class="question-input" type="text"  placeholder="Título do nível" value="${n?null==e?void 0:e.title:""}">\n    <input class="question-input" type="text"  placeholder="Link da imagem do nível" value="${n?null==e?void 0:e.imageUrl:""}">\n    <textarea class="question-input level-desc"  rows="4" placeholder="Descrição do Nível">${n?null==e?void 0:e.description:""}</textarea>\n`,L.push(r),v.appendChild(r),setTimeout(()=>{r.classList.add("display-visible")},0)}let j=0,R={title:"Voce eh praticamente um aluno de Hogwarst!",description:"Lorem ipsum dolor sit amet consectetur adipisicing elit.Repellendus, qui! Doloremque, id? Nam perspiciatis suscipitlaboriosam sapiente eligendi obcaecati placeat minus, magni fugaomnis tempore incidunt ratione, mollitia rem facere?",imageUrl:"https://i.pinimg.com/564x/41/2d/83/412d83a778c691059de368b047c2a52f.jpg",range:{minRange:0,maxRange:100}},k=0;let O=1,U=0;const N=document.querySelector(".single-quizz-screen");function P(e,t){!function(){const e=null==N?void 0:N.querySelectorAll(".single-answer-container");for(let t of e)t.hasAttribute("correct")?t.classList.toggle("correct"):t.classList.toggle("wrong")}(),O++,e.hasAttribute("correct")&&U++;t.data.questions.length<O?setTimeout((function(){!function(e,t){k=t,j=Math.round(k/e.data.questions.length*100);for(let t of e.data.levels)if(j>=t.range.minRange&&j<=t.range.maxRange)return void(R=t)}(t,U),W(t)}),2e3):setTimeout((function(){$(t)}),2e3)}function $(e){N.innerHTML="";const t=e.data.questions[O-1].answers.sort(()=>Math.random()-.5);let n=` <h1>${e.title}</h1>\n  <header class="question-header">\n    <h3>${O}. ${e.data.questions[O-1].questionTitle}</h3>\n  </header> `,r=document.createElement("div");r.setAttribute("class","answers-container");for(let e=0;e<4;e++)r.innerHTML+=`<div class="single-answer-container"  ${t[e].correct?"correct":""}>\n    <figure class="answer-image-container">\n      <img\n        src="${t[e].answerUrl}"\n        alt="resposta quizz"\n      />\n    </figure>\n    <div class="border-container">\n      <p>${t[e].answer}</p>\n    </div>\n  </div>`;for(let t=1;t<=4;t++){let n=r.querySelector(`.single-answer-container:nth-child(${t})`);null==n||n.addEventListener("click",(function(){P(this,e)}))}null==N||N.insertAdjacentHTML("afterbegin",n),null==N||N.insertAdjacentElement("beforeend",r),document.documentElement.style.setProperty("--azulPrincipal",""+e.data.config.themeColor),document.documentElement.style.setProperty("--quizzFontColor",""+e.data.config.fontColor),setTimeout(()=>{r.classList.add("display-visible")},0)}var B=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};const D=document.querySelector("body");let M="";const H=document.querySelector(".create-quizz-screen"),F=document.querySelector("main"),_=document.querySelector(".main-header"),I=document.querySelector(".quizzes-screen"),Q=document.querySelector(".end-game-screen"),V=document.querySelector(".single-quizz-screen");function X(e){const t=document.querySelector(".login-screen");M=e,d(M),null==t||t.classList.add("display-none"),null==F||F.classList.remove("display-none"),null==_||_.classList.remove("display-none"),null==I||I.classList.remove("display-none")}function J(){const e=document.querySelector(".create-quizz-screen");d(M),null==e||e.classList.toggle("display-none"),null==I||I.classList.toggle("display-none")}function G(e){var t,n;e?function(e,t,n){n.innerHTML="",E(n),h.addEventListener("click",()=>{T(!0,t,e.id)}),h.innerText="Atualizar",z=[],L=[],p.value=e.title,g.value=e.data.config.fontColor,y.value=e.data.config.themeColor;for(let t=0;t<e.data.questions.length;t++)A(e.data.questions[t],t+1,!0);for(let t=0;t<e.data.levels.length;t++)C(e.data.levels[t],t+1,!0)}(e,M,H):(t=M,(n=H).innerHTML="",E(n),h.addEventListener("click",()=>{T(!1,t)}),h.innerText="Publicar",z=[],L=[],b=1,x=1,A(),C()),null==H||H.classList.toggle("display-none"),null==I||I.classList.toggle("display-none")}function K(e,t){e.target.classList.contains("md")||($(t),null==I||I.classList.toggle("display-none"),null==V||V.classList.toggle("display-none"))}function W(e){!function(e,t){let n=`<h1>${e.title}</h1>\n  <header class="question-header">\n    <h3>Voce acertou ${k} de ${e.data.questions.length} perguntas ! Score: ${j}%</h3>\n  </header>\n  <div class="result-container">\n    <div class="result-text-container">\n      <h3>${R.title}</h3>\n      <p>\n        ${R.description}\n      </p>\n    </div>\n    <figure class="result-image-container">\n      <img\n        src="${R.imageUrl}"\n        alt=""\n      />\n    </figure>\n  </div>`;null==t||t.insertAdjacentHTML("afterbegin",n)}(e,Q),null==V||V.classList.toggle("display-none"),null==Q||Q.classList.toggle("display-none")}function Y(){const e=document.querySelector(".loading-gif"),t=document.querySelector(".login-button");null==e||e.classList.toggle("display-none"),null==t||t.classList.toggle("display-none")}function Z(){const e=document.querySelector(".loading-gif-quizz"),t=document.querySelector(".post-quizz-button");null==e||e.classList.toggle("display-none"),null==t||t.classList.toggle("display-none")}!function(){const e=document.createElement("section");e.setAttribute("class","login-screen"),e.innerHTML='\n  <h1>BuzzQuizz</h1>\n  <h3>O Quiz que você Quizzer</h3>\n  <div class="login-container">\n    <input\n      class="email-input"\n      type="email"\n      name="email"\n      placeholder="E-mail"\n    />\n    <input\n      class="password-input"\n      type="password"\n      name="password"\n      placeholder="Senha"\n    />\n    <button class="login-button">Entrar</button>\n    <div class="loading-gif display-none">\n      <img src="./assets/images/loadingBtn.gif" alt="" />\n    </div>\n  </div>\n',e.querySelector(".login-button").addEventListener("click",()=>function(){return B(this,void 0,void 0,(function*(){const e=document.querySelector(".email-input"),t=document.querySelector(".password-input"),n={email:e.value.trim(),password:t.value.trim()};if(""!==n.email&&""!==n.password)try{Y();const e=yield o.a.post("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/users",n);X(e.data.token)}catch(e){alert("Email ou senha incorretos"),console.error(e),window.location.reload()}else alert("Preencher todos os campos")}))}()),D.insertAdjacentElement("afterbegin",e)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,