!function(e){var n={};function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(i,o,function(n){return e[n]}.bind(null,o));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n),t.d(n,"renderFromLoginToQuizzes",(function(){return B})),t.d(n,"renderFromCreateToQuizzes",(function(){return V})),t.d(n,"renderFromQuizzesToCreate",(function(){return G})),t.d(n,"renderFromQuizzesToQuizz",(function(){return J})),t.d(n,"renderFromQuizzToEndGame",(function(){return K})),t.d(n,"toggleIsLoading",(function(){return W})),t.d(n,"toggleIsLoadingQuizz",(function(){return X}));const i=document.querySelector(".loading-screen");function o(e){return e.charAt(0).toUpperCase()+e.slice(1)}function r(){i.classList.toggle("display-none")}var a=function(e,n,t,i){return new(t||(t=Promise))((function(o,r){function a(e){try{s(i.next(e))}catch(e){r(e)}}function l(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,l)}s((i=i.apply(e,n||[])).next())}))};const l=document.querySelector(".quizzes-screen");function s(e,n){return a(this,void 0,void 0,(function*(){if("SIM"===prompt("Tem certeza? pra apagar digite SIM"))try{yield axios.delete("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes/"+e,{headers:{"User-Token":n}}),c(n)}catch(e){console.error(e)}}))}function c(e){return a(this,void 0,void 0,(function*(){let n=yield function(e){return a(this,void 0,void 0,(function*(){let n=[];try{r();const{data:t}=yield axios.get("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes",{headers:{"User-token":e}});for(let e of t)n.push({id:e.id,title:e.title,data:e.data})}catch(e){console.error(e)}return r(),n}))}(e);l.innerHTML="";const t=document.createElement("div");t.setAttribute("class","box-container new-quizz-container"),t.addEventListener("click",()=>{G()}),t.innerHTML='<h3>Novo Quizz</h3> <ion-icon name="add-circle"></ion-icon>',null==l||l.insertAdjacentElement("beforeend",t);for(let t of n){let n=`<h3>${t.title}</h3>\n    <div class="icons-container">\n      <ion-icon class="delete-icon" name="trash"></ion-icon>\n      <ion-icon class="edit-icon"   name="create"></ion-icon>\n    </div>`,i=document.createElement("div");i.setAttribute("class","box-container"),i.addEventListener("click",(function(e){J(e,t)})),i.innerHTML=n,i.querySelector(".edit-icon").addEventListener("click",(function(e){G(t)})),i.querySelector(".delete-icon").addEventListener("click",()=>{s(t.id,e)}),null==l||l.insertAdjacentElement("beforeend",i)}}))}var u=function(e,n,t,i){return new(t||(t=Promise))((function(o,r){function a(e){try{s(i.next(e))}catch(e){r(e)}}function l(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,l)}s((i=i.apply(e,n||[])).next())}))};let d,p,m,v,f,g,h=[],y=1,z=[],q=[],b=1,w=[];function L(e=!1,n,t){try{!function(){h=[];for(let e of z){let n,t=[],i=o(e.children[1].value.trim());x(i);for(let n=2;n<=5;n++){const i=o(e.children[n].children[0].value.trim()),r=e.children[n].children[1].value.trim();if(t.push({answer:i,answerUrl:r,correct:2===n}),""===i||""===r)throw new Error("Campo de resposta vazio")}n={questionTitle:i,answers:t},h.push(n)}}(),function(){q=[];for(let e of w){let n,t={minRange:Number(e.children[1].children[0].value.trim()),maxRange:Number(e.children[1].children[1].value.trim())},i=o(e.children[2].value.trim()),r=e.children[3].value.trim(),a=o(e.children[4].value.trim());if(""===i||""===r||""===a||isNaN(t.minRange)||isNaN(t.maxRange))throw new Error("Preencha todos os campos do nivel");n={title:i,range:t,description:a,imageUrl:r},q.push(n)}}(),e?function(e,n){u(this,void 0,void 0,(function*(){const t={title:o(d.value.trim()),data:{levels:q,questions:h,config:{fontColor:f.value.trim(),themeColor:g.value.trim()}}};try{X(),yield axios.put("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes/"+e,t,{headers:{"User-Token":n}}),V()}catch(e){console.error(e),alert("Preencha todos os campos")}X()}))}(t,n):function(e){u(this,void 0,void 0,(function*(){const n={title:o(d.value.trim()),data:{levels:q,questions:h,config:{fontColor:f.value.trim(),themeColor:g.value.trim()}}};try{X(),yield axios.post("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/quizzes",n,{headers:{"User-Token":e}}),V()}catch(e){console.error(e),alert("Preencha todos os campos")}X()}))}(n)}catch(e){alert(e.message),console.error(e)}}function x(e){if("?"!==e.charAt(e.length-1)||e.indexOf("?")!==e.length-1)throw new Error("É obrigatorio terminar a pergunta com '?', e só se pode ter 1 pergunta por bloco de perguntas.")}function S(e){e.innerHTML='<input\n  class="quizz-title-input"\n  type="text"\n  id="quizz-title"\n  placeholder="Digite o título do seu quizz"\n/>\n<div class="color-picker">\n  <p>Selecione as cores do seu Quizz:</p>\n  <div>\n    <input\n      type="color"\n      id="quizz-bg-color"\n      name="head"\n      value="#6c8fb8"\n    />\n    <label for="head">Fundo</label>\n  </div>\n\n  <div>\n    <input\n      type="color"\n      id="quizz-font-color"\n      name="body"\n      value="#DDDDDD"\n    />\n    <label for="body">Fonte</label>\n  </div>\n</div>\n<div class="questions-container"></div>\n<ion-icon\n  class="add-question"\n  name="add-circle"\n></ion-icon>\n<div class="levels-container"></div>\n<ion-icon\n  class="add-level"\n  name="add-circle"\n></ion-icon>\n<button class="post-quizz-button">PUBLICAR</button>\n<div class="loading-gif-quizz display-none">\n  <img src="./assets/images/loadingBtn.gif" alt="" />\n</div>',e.querySelector(".add-level").addEventListener("click",()=>{b++,$()}),e.querySelector(".add-question").addEventListener("click",()=>{y++,T()}),m=e.querySelector(".questions-container"),v=e.querySelector(".levels-container"),d=e.querySelector("#quizz-title"),p=e.querySelector(".post-quizz-button"),f=document.querySelector("#quizz-font-color"),g=document.querySelector("#quizz-bg-color")}function T(e,n,t=!1){t&&(y=n);let i=document.createElement("div");i.setAttribute("class","create-question-container"),i.innerHTML=`<h3>Pergunta ${y}</h3>\n    <input class="question-input" type="text" placeholder="Digite a pergunta" value="${t?null==e?void 0:e.questionTitle:""}" >\n    <div class="answer-input-container correct-answer">\n      <input type="text" placeholder="Digite a resposta correta" value="${t?null==e?void 0:e.answers[0].answer:""}">\n      <input type="text" placeholder="Link para imagem correta" value="${t?null==e?void 0:e.answers[0].answerUrl:""}">\n    </div>\n    <div class="answer-input-container wrong-answer">\n      <input type="text" placeholder="Digite a resposta errada 1" value="${t?null==e?void 0:e.answers[1].answer:""}">\n      <input type="text" placeholder="Link para imagem errada 1" value="${t?null==e?void 0:e.answers[1].answerUrl:""}">\n    </div>\n    <div class="answer-input-container wrong-answer">\n      <input type="text" placeholder="Digite a resposta errada 2" value="${t?null==e?void 0:e.answers[2].answer:""}">\n      <input type="text" placeholder="Link para imagem errada 2" value="${t?null==e?void 0:e.answers[2].answerUrl:""}">\n    </div>\n    <div class="answer-input-container wrong-answer">\n      <input type="text" placeholder="Digite a resposta errada 3" value="${t?null==e?void 0:e.answers[3].answer:""}">\n      <input type="text" placeholder="Link para imagem errada 3" value="${t?null==e?void 0:e.answers[3].answerUrl:""}">\n    </div>`,z.push(i),m.appendChild(i),setTimeout(()=>{i.classList.add("display-visible")},0)}function $(e,n,t=!1){t&&(b=n);let i=document.createElement("div");i.setAttribute("class","create-level-container"),i.innerHTML=`\n  <h3>Nível ${b}</h3>\n  <div class="answer-input-container">\n    <input type="text" placeholder="% Minima de Acerto do nível" value="${t?null==e?void 0:e.range.minRange:""}">\n    <input type="text"  placeholder="% Máxima de Acerto do nível" value="${t?null==e?void 0:e.range.maxRange:""}">\n  </div>\n    <input class="question-input" type="text"  placeholder="Título do nível" value="${t?null==e?void 0:e.title:""}">\n    <input class="question-input" type="text"  placeholder="Link da imagem do nível" value="${t?null==e?void 0:e.imageUrl:""}">\n    <textarea class="question-input level-desc"  rows="4" placeholder="Descrição do Nível">${t?null==e?void 0:e.description:""}</textarea>\n`,w.push(i),v.appendChild(i),setTimeout(()=>{i.classList.add("display-visible")},0)}let E=0,k={title:"Voce eh praticamente um aluno de Hogwarst!",description:"Lorem ipsum dolor sit amet consectetur adipisicing elit.Repellendus, qui! Doloremque, id? Nam perspiciatis suscipitlaboriosam sapiente eligendi obcaecati placeat minus, magni fugaomnis tempore incidunt ratione, mollitia rem facere?",imageUrl:"https://i.pinimg.com/564x/41/2d/83/412d83a778c691059de368b047c2a52f.jpg",range:{minRange:0,maxRange:100}},M=0;let A=1,P=0;const C=document.querySelector(".single-quizz-screen");function U(e,n){!function(){const e=null==C?void 0:C.querySelectorAll(".single-answer-container");for(let n of e)n.hasAttribute("correct")?n.classList.toggle("correct"):n.classList.toggle("wrong")}(),A++,e.hasAttribute("correct")&&P++;n.data.questions.length<A?setTimeout((function(){!function(e,n){M=n,E=Math.round(M/e.data.questions.length*100);for(let n of e.data.levels)if(E>=n.range.minRange&&E<=n.range.maxRange)return void(k=n)}(n,P),K(n)}),2e3):setTimeout((function(){j(n)}),2e3)}function j(e){C.innerHTML="";const n=e.data.questions[A-1].answers.sort(()=>Math.random()-.5);let t=` <h1>${e.title}</h1>\n  <header class="question-header">\n    <h3>${A}. ${e.data.questions[A-1].questionTitle}</h3>\n  </header> `,i=document.createElement("div");i.setAttribute("class","answers-container");for(let e=0;e<4;e++)i.innerHTML+=`<div class="single-answer-container"  ${n[e].correct?"correct":""}>\n    <figure class="answer-image-container">\n      <img\n        src="${n[e].answerUrl}"\n        alt="resposta quizz"\n      />\n    </figure>\n    <div class="border-container">\n      <p>${n[e].answer}</p>\n    </div>\n  </div>`;for(let n=1;n<=4;n++){let t=i.querySelector(`.single-answer-container:nth-child(${n})`);null==t||t.addEventListener("click",(function(){U(this,e)}))}null==C||C.insertAdjacentHTML("afterbegin",t),null==C||C.insertAdjacentElement("beforeend",i),document.documentElement.style.setProperty("--azulPrincipal",""+e.data.config.themeColor),document.documentElement.style.setProperty("--quizzFontColor",""+e.data.config.fontColor),setTimeout(()=>{i.classList.add("display-visible")},0)}var D=function(e,n,t,i){return new(t||(t=Promise))((function(o,r){function a(e){try{s(i.next(e))}catch(e){r(e)}}function l(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,l)}s((i=i.apply(e,n||[])).next())}))};const H=document.querySelector("body");let Q="";const R=document.querySelector(".create-quizz-screen"),N=document.querySelector("main"),O=document.querySelector(".main-header"),F=document.querySelector(".quizzes-screen"),_=document.querySelector(".end-game-screen"),I=document.querySelector(".single-quizz-screen");function B(e){const n=document.querySelector(".login-screen");Q=e,c(Q),null==n||n.classList.add("display-none"),null==N||N.classList.remove("display-none"),null==O||O.classList.remove("display-none"),null==F||F.classList.remove("display-none")}function V(){const e=document.querySelector(".create-quizz-screen");c(Q),null==e||e.classList.toggle("display-none"),null==F||F.classList.toggle("display-none")}function G(e){var n,t;e?function(e,n,t){t.innerHTML="",S(t),p.addEventListener("click",()=>{L(!0,n,e.id)}),p.innerText="Atualizar",z=[],w=[],d.value=e.title,f.value=e.data.config.fontColor,g.value=e.data.config.themeColor;for(let n=0;n<e.data.questions.length;n++)T(e.data.questions[n],n+1,!0);for(let n=0;n<e.data.levels.length;n++)$(e.data.levels[n],n+1,!0)}(e,Q,R):(n=Q,(t=R).innerHTML="",S(t),p.addEventListener("click",()=>{L(!1,n)}),p.innerText="Publicar",z=[],w=[],y=1,b=1,T(),$()),null==R||R.classList.toggle("display-none"),null==F||F.classList.toggle("display-none")}function J(e,n){e.target.classList.contains("md")||(j(n),null==F||F.classList.toggle("display-none"),null==I||I.classList.toggle("display-none"))}function K(e){!function(e,n){let t=`<h1>${e.title}</h1>\n  <header class="question-header">\n    <h3>Voce acertou ${M} de ${e.data.questions.length} perguntas ! Score: ${E}%</h3>\n  </header>\n  <div class="result-container">\n    <div class="result-text-container">\n      <h3>${k.title}</h3>\n      <p>\n        ${k.description}\n      </p>\n    </div>\n    <figure class="result-image-container">\n      <img\n        src="${k.imageUrl}"\n        alt=""\n      />\n    </figure>\n  </div>`;null==n||n.insertAdjacentHTML("afterbegin",t)}(e,_),null==I||I.classList.toggle("display-none"),null==_||_.classList.toggle("display-none")}function W(){const e=document.querySelector(".loading-gif"),n=document.querySelector(".login-button");null==e||e.classList.toggle("display-none"),null==n||n.classList.toggle("display-none")}function X(){const e=document.querySelector(".loading-gif-quizz"),n=document.querySelector(".post-quizz-button");null==e||e.classList.toggle("display-none"),null==n||n.classList.toggle("display-none")}!function(){const e=document.createElement("section");e.setAttribute("class","login-screen"),e.innerHTML='\n  <h1>BuzzQuizz</h1>\n  <h3>O Quiz que você Quizzer</h3>\n  <div class="login-container">\n    <input\n      class="email-input"\n      type="email"\n      name="email"\n      placeholder="E-mail"\n    />\n    <input\n      class="password-input"\n      type="password"\n      name="password"\n      placeholder="Senha"\n    />\n    <button class="login-button">Entrar</button>\n    <div class="loading-gif display-none">\n      <img src="./assets/images/loadingBtn.gif" alt="" />\n    </div>\n  </div>\n',e.querySelector(".login-button").addEventListener("click",()=>function(){return D(this,void 0,void 0,(function*(){const e=document.querySelector(".email-input"),n=document.querySelector(".password-input"),t={email:e.value.trim(),password:n.value.trim()};if(""!==t.email&&""!==t.password)try{W();const e=yield axios.post("https://mock-api.bootcamp.respondeai.com.br/api/v1/buzzquizz/users",t);B(e.data.token)}catch(e){alert("Email ou senha incorretos"),console.error(e),window.location.reload()}else alert("Preencher todos os campos")}))}()),H.insertAdjacentElement("afterbegin",e)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,